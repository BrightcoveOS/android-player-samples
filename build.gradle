// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply from: 'constants.gradle'

buildscript {
  repositories {
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.1.3'

    classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.2.2'
  }
}

println "Using Android Native Player version: $anpVersion"

project.ext {
  // The directory that will be used to reference dependent libraries.
  // Modify as needed. Defaulted to users home directory.
  libraryDirectory = "${System.getProperty("user.home")}/libs/"
}

configure(subprojects.findAll {it.name.endsWith('SampleApp')}) {
  apply plugin: 'com.android.application'

  repositories {
    mavenLocal()
    google()
    jcenter()

    maven {
      url 'https://maven.google.com'
    }
    maven {
      url 'http://repo.brightcove.com/releases'
    }
    maven {
      url System.getenv('ANDROID_HOME') + '/extras/android/m2repository'
    }
    maven {
      url System.getenv('ANDROID_HOME') + '/extras/google/m2repository'
    }

    // This top level file repository will provide/contain third party
    // dependencies which are either downloaded directly (not using a
    // Maven repo) or installed manually for something like VisualOn.
    flatDir {
      dirs libraryDirectory
    }
  }

  android {
    compileSdkVersion ANDROID_COMPILE_SDK_VERSION
    buildToolsVersion ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
      minSdkVersion ANDROID_MIN_SDK_VERSION
      targetSdkVersion ANDROID_TARGET_SDK_VERSION
    }

    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
      release {
          storeFile file("${rootDir}/release.keystore")
          storePassword "my_keystore_password"
          keyAlias "my_key"
          keyPassword "my_password"
      }
    }

    buildTypes {
      release {
        signingConfig signingConfigs.release
        minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), "${rootDir}/proguard-project.txt"
      }
    }

    lintOptions {
      warning 'InvalidPackage'
    }

    gradle.projectsEvaluated {
      tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
      }
    }
  }

  dependencies {
    implementation "com.brightcove.player:android-sdk:${anpVersion}"
  }

  if (project.name.contains('IMA')) {
    dependencies {
      implementation "com.brightcove.player:android-ima-plugin:${anpVersion}"
      implementation 'com.google.ads.interactivemedia.v3:interactivemedia:'+GOOGLE_IMA_SDK_VERSION
      implementation 'com.google.android.gms:play-services-ads:'+PLAY_SERVICES_VERSION
      implementation 'com.android.support:support-v4:'+SUPPORT_V4_VERSION
    }
  }

  if (project.name.contains('Omniture')) {
    dependencies {
      implementation "com.brightcove.player:android-omniture-plugin:${anpVersion}"
      implementation files(libraryDirectory + "adobeMobileLibrary.jar")
    }
  }

  if (project.name.contains('OnceUx')) {
    dependencies {
      implementation "com.brightcove.player:android-onceux-plugin:${anpVersion}"
      implementation "com.brightcove.player:exoplayer2:${anpVersion}"
    }
  }

  if (project.name.contains('Ssai')) {
    dependencies {
      implementation "com.brightcove.player:android-ssai-plugin:${anpVersion}"
      implementation "com.brightcove.player:exoplayer2:${anpVersion}"
    }
  }

  if (project.parent.name.equals('brightcove-exoplayer') ||
          project.parent.name.equals('brightcove-player-controls')) {
    dependencies {
      implementation "com.brightcove.player:exoplayer2:${anpVersion}"
      implementation 'com.android.support:support-media-compat:'+APPCOMPAT_V7_VERSION
    }

    android {
      defaultConfig {
        minSdkVersion ANDROID_MIN_SDK_VERSION
      }
    }
  }

  if (project.name.contains('WebVTT')) {
    android {
      defaultConfig {
        minSdkVersion ANDROID_MIN_SDK_VERSION
      }
    }
  }

  if (project.name.contains('Cast')) {
    dependencies {
      implementation "com.brightcove.player:android-cast-plugin:${anpVersion}"
    }
  }

  if (project.name.contains('FreeWheel')) {
    dependencies {
      implementation "com.brightcove.player:android-freewheel-plugin:${anpVersion}"
      implementation files(libraryDirectory + "AdManager.aar")
    }
  }

  println "Processing ${project.name}"
}

repositories {
  google()
}
