// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:2.2.3'
    classpath 'de.undercouch:gradle-download-task:0.+'

    classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.2.2'
  }
}

println "Using Android Native Player version: $anpVersion"

project.ext {
  // The directory that will be used to reference dependent libraries.
  // Modify as needed. Defaulted to users home directory.
  libraryDirectory = "${System.getProperty("user.home")}/libs/"
  imaAndroidSdkZipFileName = "ima-android-v3-3.1.3.zip"
}

// Automatically download the Google IMA third party zip file and
// extract the jar to satisfy the dependency.
def downloadIMA() {
  // Conditionally download the Google IMA SDK during
  // configuration.  This step is done once.  The 'clean' task will not
  // remove libraries from /libs/.
  File dep = file(libraryDirectory + "lib/sdk.jar")
  if (!dep.exists()) {
    apply plugin: 'download-task'

    println "Downloading the Google IMA SDK..."

    download {
      src 'http://imasdk.googleapis.com/native/downloads/' + imaAndroidSdkZipFileName
      dest file(libraryDirectory + imaAndroidSdkZipFileName)
    }

    copy {
      from(zipTree(file(libraryDirectory + imaAndroidSdkZipFileName)))
      into file(libraryDirectory)
    }
  }
}

configure(subprojects.findAll {it.name.endsWith('SampleApp')}) {
  apply plugin: 'com.android.application'

  repositories {
    mavenLocal()
    jcenter()

    maven {
      url 'http://repo.brightcove.com/snapshots'
    }
    maven {
      url 'http://repo.brightcove.com/releases'
    }
    maven {
      url System.getenv('ANDROID_HOME') + '/extras/android/m2repository'
    }
    maven {
      url System.getenv('ANDROID_HOME') + '/extras/google/m2repository'
    }

    // This top level file repository will provide/contain third party
    // dependencies which are either downloaded directly (not using a
    // Maven repo) or installed manually for something like VisualOn.
    flatDir {
      dirs libraryDirectory
    }
  }

  android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
      minSdkVersion 13
      targetSdkVersion 23
    }

    signingConfigs {
      release {
          storeFile file("${rootDir}/release.keystore")
          storePassword "my_keystore_password"
          keyAlias "my_key"
          keyPassword "my_password"
      }
    }

    buildTypes {
      release {
        signingConfig signingConfigs.release
        minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), "${rootDir}/proguard-project.txt"
      }
    }

    gradle.projectsEvaluated {
      tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
      }
    }
  }

  dependencies {
    compile "com.brightcove.player:android-sdk:${anpVersion}"
  }

  if (project.name.contains('AdobePass')) {
    dependencies {
      compile files(libraryDirectory + "android_accessenabler-1.7.2.jar")
      compile 'com.google.code.gson:gson:2.+'
    }
  }

  if (project.name.contains('AIS')) {
    dependencies {
      compile 'com.google.code.gson:gson:2.+'
    }
  }

  if (project.name.contains('IMA')) {
    downloadIMA()
    dependencies {
      compile "com.brightcove.player:android-ima-plugin:${anpVersion}"
      compile files(libraryDirectory + "lib/sdk.jar")
      compile 'com.google.android.gms:play-services-ads:8.1.0'
    }
  }

  if (project.name.contains('Omniture')) {
    dependencies {
      compile "com.brightcove.player:android-omniture-plugin:${anpVersion}"
      compile files(libraryDirectory + "adobeMobileLibrary.jar")
    }

    android {
      defaultConfig {
        minSdkVersion 16
      }
    }
  }

  if (project.name.contains('OnceUx')) {
    dependencies {
      compile "com.brightcove.player:android-onceux-plugin:${anpVersion}"
      compile "com.brightcove.player:exoplayer:${anpVersion}"
    }

    android {
      defaultConfig {
        minSdkVersion 16
      }
    }
  }

  if (project.parent.name.equals('brightcove-exoplayer') ||
          project.parent.name.equals('brightcove-player-controls')) {
    dependencies {
      compile "com.brightcove.player:exoplayer:${anpVersion}"
    }

    android {
      defaultConfig {
        minSdkVersion 16
      }
    }
  }

  if (project.name.contains('WebVTT')) {
    android {
      defaultConfig {
        minSdkVersion 19
      }
    }
  }

  if (project.name.contains('WebView')) {
    android {
      lintOptions {
        disable 'SetJavaScriptEnabled'
      }
    }
  }

  if (project.name.contains('Cast')) {
    dependencies {
      compile "com.brightcove.player:android-cast-plugin:${anpVersion}"
    }
  }

  if (project.name.contains('FreeWheel')) {
    dependencies {
      compile "com.brightcove.player:android-freewheel-plugin:${anpVersion}"
      compile files(libraryDirectory + "AdManager.jar")
    }
  }

  println "Processing ${project.name}"
}
